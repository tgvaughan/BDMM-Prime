<beast version="2.0"
       namespace="beast.app.beauti
                  :beast.base.evolution.branchratemodel
                  :beast.base.evolution.speciation
                  :beast.base.evolution.tree.coalescent
                  :beast.base.util
                  :beast.base.evolution.nuc
                  :beast.base.evolution.operators
                  :beast.base.evolution.sitemodel
                  :beast.base.evolution.substitutionmodel
                  :beast.base.evolution.likelihood
                  :beast.base.evolution
                  :beast.base.inference.distribution">

    <mergewith point="misc">
        <fragment id="BDMMPrimeSATreeOperators" spec="beastfx.app.beauti.Fragment">
            <![CDATA[
            <operator id='$(m)LeafToSA.t:$(n)' spec='sa.evolution.operators.LeafToSampledAncestorJump' weight="10" tree="@Tree.t:$(n)"/>
            <operator id='$(m)SAWilsonBalding.t:$(n)' spec='sa.evolution.operators.SAWilsonBalding' weight="10" tree="@Tree.t:$(n)"/>
            <operator id='$(m)SAWide.t:$(n)' spec='sa.evolution.operators.SAExchange' isNarrow="false" weight="10" tree="@Tree.t:$(n)"/>
            <operator id='$(m)SANarrow.t:$(n)' spec='sa.evolution.operators.SAExchange' weight="10" tree="@Tree.t:$(n)"/>
            <operator id='$(m)SAUniformOperator.t:$(n)' spec='sa.evolution.operators.SAUniform' weight="20" tree="@Tree.t:$(n)"/>
            <operator id='$(m)SATreeRootScaler.t:$(n)' spec='sa.evolution.operators.SAScaleOperator' scaleFactor=".95" weight="1" tree="@Tree.t:$(n)" rootOnly='true'/>
            <operator id='$(m)SATreeScaler.t:$(n)' spec='sa.evolution.operators.SAScaleOperator' scaleFactor=".95" weight="3" tree="@Tree.t:$(n)"/>
            ]]>
            <connect srcID="$(m)LeafToSA.t:$(n)" targetID="mcmc" inputName="operator"
                     if="inposterior($(m).t:$(n)) and Tree.t:$(n)/estimate=true">
                Changes whether a sample is a leaf or sampled ancestor.
            </connect>
            <connect srcID="$(m)SAWilsonBalding.t:$(n)" targetID="mcmc" inputName="operator"
                     if="inposterior($(m).t:$(n)) and Tree.t:$(n)/estimate=true">
                Wilson-Balding topology move for trees with sampled ancestors.
            </connect>
            <connect srcID="$(m)SAWide.t:$(n)" targetID="mcmc" inputName="operator"
                     if="inposterior($(m).t:$(n)) and Tree.t:$(n)/estimate=true">
                Wide exchange topology operator for trees with sampled ancestors.
            </connect>
            <connect srcID="$(m)SANarrow.t:$(n)" targetID="mcmc" inputName="operator"
                     if="inposterior($(m).t:$(n)) and Tree.t:$(n)/estimate=true">
                Narrow exchange topology operator for trees with sampled ancestors.
            </connect>
            <connect srcID="$(m)SAUniformOperator.t:$(n)" targetID="mcmc" inputName="operator"
                     if="inposterior($(m).t:$(n)) and Tree.t:$(n)/estimate=true">
                Uniform node age operator for trees with sampled ancestors.
            </connect>
            <connect srcID="$(m)SATreeRootScaler.t:$(n)" targetID="mcmc" inputName="operator"
                     if="inposterior($(m).t:$(n)) and Tree.t:$(n)/estimate=true">
                Tree root age scaler for trees with sampled ancestors.
            </connect>
            <connect srcID="$(m)SATreeScaler.t:$(n)" targetID="mcmc" inputName="operator"
                     if="inposterior($(m).t:$(n)) and Tree.t:$(n)/estimate=true">
                Tree scaler for trees with sampled ancestors.
            </connect>
        </fragment>
    </mergewith>

    <mergewith point="treePriorTemplates">

        <subtemplate id="BDMMPrime" class="bdmmprime.distribution.BirthDeathMigrationDistribution" mainid="BDMMPrime.t:$(n)"
                     suppressInputs="bdmmprime.distribution.BirthDeathMigrationDistribution.typeLabel,
                        bdmmprime.distribution.BirthDeathMigrationDistribution.storeNodeTypes,
                        bdmmprime.distribution.BirthDeathMigrationDistribution.tree,
                        bdmmprime.distribution.BirthDeathMigrationDistribution.finalSampleOffset,
                        bdmmprime.distribution.BirthDeathMigrationDistribution.conditionOnRoot,
                        bdmmprime.distribution.BirthDeathMigrationDistribution.treeIntervals,
                        bdmmprime.distribution.BirthDeathMigrationDistribution.savePartialLikelihoodsToFile,
                        bdmmprime.parameterization.CanonicalParameterization.typeSet,
                        bdmmprime.parameterization.SkylineVectorParameter.processLength,
                        bdmmprime.parameterization.SkylineMatrixParameter.processLength,
                        bdmmprime.util.priors.ZeroExcludingPrior.x,
                        bdmmprime.util.OptionalLogger.model"
                     inlineInputs="bdmmprime.distribution.BirthDeathMigrationDistribution.parameterization">

            <![CDATA[
                <distribution id="BDMMPrime.t:$(n)" spec="bdmmprime.distribution.BirthDeathMigrationDistribution"
                              tree="@Tree.t:$(n)" conditionOnSurvival="false" parallelize="true">

                    <parameterization id="CanonicalBDMMPrimeParameterization.t:$(n)"
                                      spec="bdmmprime.parameterization.CanonicalParameterization">
                        <processLength idref="originBDMMPrime.t:$(n)"/>
                        <typeSet idref="typeSetBDMMPrime.t:$(n)"/>
                        <birthRate id="birthRateSVCanonical.t:$(n)" spec="bdmmprime.parameterization.SkylineVectorParameter" typeSet="@typeSetBDMMPrime.t:$(n)" timesAreAges="true">
                            <processLength idref="originBDMMPrime.t:$(n)"/>
                            <skylineValues id="birthRateCanonical.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="1.0"/>
                        </birthRate>
                        <birthRateAmongDemes id="birthRateAmongDemesSMCanonical.t:$(n)" spec="bdmmprime.parameterization.SkylineMatrixParameter" typeSet="@typeSetBDMMPrime.t:$(n)" timesAreAges="true">
                            <processLength idref="originBDMMPrime.t:$(n)"/>
                            <skylineValues id="birthRateAmongDemesCanonical.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="1.0" estimate="false"/>
                        </birthRateAmongDemes>
                        <deathRate id="deathRateSVCanonical.t:$(n)" spec="bdmmprime.parameterization.SkylineVectorParameter" typeSet="@typeSetBDMMPrime.t:$(n)" timesAreAges="true">
                            <processLength idref="originBDMMPrime.t:$(n)"/>
                            <skylineValues id="deathRateCanonical.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="1.0"/>
                        </deathRate>
                        <migrationRate id="migrationRateSMCanonical.t:$(n)" spec="bdmmprime.parameterization.SkylineMatrixParameter" typeSet="@typeSetBDMMPrime.t:$(n)" timesAreAges="true">
                            <processLength idref="originBDMMPrime.t:$(n)"/>
                            <skylineValues id="migrationRateCanonical.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="1.0" estimate="false"/>
                        </migrationRate>
                        <samplingRate id="samplingRateSVCanonical.t:$(n)" spec="bdmmprime.parameterization.SkylineVectorParameter" typeSet="@typeSetBDMMPrime.t:$(n)" timesAreAges="true">
                            <processLength idref="originBDMMPrime.t:$(n)"/>
                            <skylineValues id="samplingRateCanonical.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="0.1"/>
                        </samplingRate>
                        <removalProb id="removalProbSVCanonical.t:$(n)" spec="bdmmprime.parameterization.SkylineVectorParameter" typeSet="@typeSetBDMMPrime.t:$(n)" timesAreAges="true">
                            <processLength idref="originBDMMPrime.t:$(n)"/>
                            <skylineValues id="removalProbCanonical.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="1.0" lower="0.0" upper="1.0" estimate="false"/>
                        </removalProb>

                        <rhoSampling id="rhoSamplingProbTPCanonical.t:$(n)" spec="bdmmprime.parameterization.TimedParameter" typeSet="@typeSetBDMMPrime.t:$(n)" timesAreAges="true">
                            <processLength idref="originBDMMPrime.t:$(n)"/>
                        </rhoSampling>
                    </parameterization>

                    <typeTraitSet id="typeTraitSet.t:$(n)" spec="bdmmprime.util.InitializedTraitSet" traitname="type">
                        <taxa spec="beast.base.evolution.alignment.TaxonSet" alignment="@$(n)"/>
                    </typeTraitSet>

                    <frequencies id="typeFrequencies.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="1.0" lower="0.0" upper="1.0"/>
                </distribution>

                <typeSet id="typeSetBDMMPrime.t:$(n)" spec="bdmmprime.parameterization.TypeSet" typeTraitSet="@typeTraitSet.t:$(n)"/>

                <origin spec="beast.base.inference.parameter.RealParameter" id="originBDMMPrime.t:$(n)" value="10.0"/>
                <prior id="originBDMMPrimePrior.t:$(n)" x="@originBDMMPrime.t:$(n)">
                   <distr spec="beast.base.inference.distribution.OneOnX"/>
                </prior>
  		        <operator id="originBDMMPrimeScaler.t:$(n)" spec="ScaleOperator" scaleFactor="0.75" weight="3" parameter="@originBDMMPrime.t:$(n)"/>

  		        <operator id="typeFrequenciesExchanger.t:$(n)" spec="DeltaExchangeOperator" parameter="@typeFrequencies.t:$(n)" delta="0.1" weight="1.0"/>

  		        <param id="birthRateChangeTimesCanonical.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="1.0" lower="0.0" estimate="false"/>
  		        <param id="birthRateAmongDemesChangeTimesCanonical.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="1.0" lower="0.0" estimate="false"/>
  		        <param id="deathRateChangeTimesCanonical.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="1.0" lower="0.0" estimate="false"/>
  		        <param id="migrationRateChangeTimesCanonical.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="1.0" lower="0.0" estimate="false"/>
  		        <param id="samplingRateChangeTimesCanonical.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="1.0" lower="0.0" estimate="false"/>
  		        <param id="removalProbChangeTimesCanonical.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="1.0" lower="0.0" estimate="false"/>

                <param id="rhoSamplingProbCanonical.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="0.0" estimate="false"/>
                <param id="rhoSamplingProbTimesCanonical.t:$(n)" spec="beast.base.inference.parameter.RealParameter" value="0.0" estimate="false"/>

                <logger spec="bdmmprime.util.OptionalLogger" id="typedTreeLogger.t:$(n)"
                        fileName="$(filebase).$(tree).typed.trees" logEvery="1000" mode="tree"
                        enableLogger="true">
                    <log spec="bdmmprime.mapping.TypeMappedTree" id="typeMappedTree.t:$(n)" bdmmDistrib="@BDMMPrime.t:$(n)"
                         mapOnInit="false" remapOnLog="true"
                         frequencies="@typeFrequencies.t:$(n)"
                         typeTraitSet="@typeTraitSet.t:$(n)"
                         typeLabel="type"
                         untypedTree="@Tree.t:$(n)"/>
                </logger>

                <logger spec="bdmmprime.util.OptionalLogger" id="nodeTypedTreeLogger.t:$(n)"
                        fileName="$(filebase).$(tree).typed.node.trees" logEvery="1000" mode="tree"
                        enableLogger="true">
                   <log spec="bdmmprime.mapping.TypedNodeTreeLogger" id="nodeTypedTree.t:$(n)"
                        typedTree="@typeMappedTree.t:$(n)"/>
                </logger>

                <log id="typedTreeStats.t:$(n)"
                     spec="bdmmprime.mapping.TypedTreeStatsLogger"
                     typedTree="@typeMappedTree.t:$(n)"
                     typeSet="@typeSetBDMMPrime.t:$(n)"
                     typeLabel="type"
                     includeRootEdge="true"/>

                <logger spec="bdmmprime.util.OptionalLogger" id="trajLogger.t:$(n)"
                        fileName="$(filebase).$(tree).traj" logEvery="1000"
                        enableLogger="false">
                        <log spec="bdmmprime.trajectories.SampledTrajectory" id="typedTraj.t:$(n)" bdmmDistrib="@BDMMPrime.t:$(n)"
                            frequencies="@typeFrequencies.t:$(n)"
                            typeMappedTree="@typeMappedTree.t:$(n)"
                            typeLabel="type"
                            useTauLeaping="true"
                            epsilon="0.03"
                            resampleOnLog="true"/>
                </logger>
            ]]>

            <plate fragment="CanonicalBDMMPrimeParameters" var="thisparam"
                   range="birthRate,birthRateAmongDemes,deathRate,migrationRate,samplingRate,removalProb,rhoSamplingProb"/>
            <plate fragment="CanonicalBDMMPrimeParameters" var="thisparam"
                   range="birthRateChangeTimes,birthRateAmongDemesChangeTimes,deathRateChangeTimes,migrationRateChangeTimes,samplingRateChangeTimes,removalProbChangeTimes,rhoSamplingProbTimes"/>
            <plate fragment="CanonicalBDMMPrimeSkylineLoggers" var="thisparam"
                   range="birthRateSV,birthRateAmongDemes,deathRateSV,migrationRateSM,samplingRateSV,removalProbSV,rhoSamplingProbTP"/>

            <connect srcID="BDMMPrime.t:$(n)" targetID="prior" inputName="distribution"
                    if="inposterior(BDMMPrime.t:$(n)) and inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true">
                BDMM prior on tree t:$(n)
            </connect>

            <plate fragment="BDMMPrimeSATreeOperators" var="m" range="BDMMPrime"/>

            <connect srcID="originBDMMPrime.t:$(n)" targetID="state" inputName="stateNode"
                     if="inposterior(BDMMPrime.t:$(n))
                     and inposterior(Tree.t:$(n))
                     and originBDMMPrime.t:$(n)/estimate=true"/>
            <connect srcID="originBDMMPrimePrior.t:$(n)" targetID="prior" inputName="distribution"
                     if="inposterior(BDMMPrime.t:$(n))
                     and inposterior(Tree.t:$(n))
                     and originBDMMPrime.t:$(n)/estimate=true"/>
            <connect srcID="originBDMMPrimeScaler.t:$(n)" targetID="mcmc" inputName="operator"
                     if="inposterior(BDMMPrime.t:$(n))
                     and inposterior(Tree.t:$(n))
                     and originBDMMPrime.t:$(n)/estimate=true"/>
            <connect srcID="originBDMMPrime.t:$(n)" targetID="tracelog" inputName="log"
                     if="inposterior(BDMMPrime.t:$(n))
                     and inposterior(Tree.t:$(n))
                     and originBDMMPrime.t:$(n)/estimate=true"/>

            <connect srcID="typeFrequencies.t:$(n)" targetID="state" inputName="stateNode"
                     if="inposterior(BDMMPrime.t:$(n))
                     and inposterior(Tree.t:$(n))
                     and typeFrequencies.t:$(n)/estimate=true"/>
            <connect srcID="typeFrequenciesExchanger.t:$(n)" targetID="mcmc" inputName="operator"
                     if="inposterior(BDMMPrime.t:$(n))
                     and inposterior(Tree.t:$(n))
                     and typeFrequencies.t:$(n)/estimate=true"/>
            <connect srcID="typeFrequencies.t:$(n)" targetID="tracelog" inputName="log"
                     if="inposterior(BDMMPrime.t:$(n))
                     and inposterior(Tree.t:$(n))
                     and typeFrequencies.t:$(n)/estimate=true"/>

            <connect srcID="typedTreeLogger.t:$(n)" targetID="mcmc" inputName="logger"
                     if="inposterior(BDMMPrime.t:$(n)) and inposterior(Tree.t:$(n))"/>

            <connect srcID="nodeTypedTreeLogger.t:$(n)" targetID="mcmc" inputName="logger"
                     if="inposterior(BDMMPrime.t:$(n)) and inposterior(Tree.t:$(n))"/>

            <connect srcID="typedTreeStats.t:$(n)" targetID="tracelog" inputName="log"
                     if="inposterior(BDMMPrime.t:$(n)) and inposterior(Tree.t:$(n))"/>

            <connect srcID="trajLogger.t:$(n)" targetID="mcmc" inputName="logger"
                     if="inposterior(BDMMPrime.t:$(n)) and inposterior(Tree.t:$(n))"/>
        </subtemplate>

    </mergewith>
</beast>


