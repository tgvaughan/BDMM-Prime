package bdmmprime.mapping;

import beast.core.BEASTObject;
import beast.core.CalculationNode;
import beast.core.Input;
import beast.core.Loggable;
import beast.evolution.tree.Node;
import beast.evolution.tree.Tree;

import java.io.PrintStream;

/**
 * Logger which takes a typed tree generated by TypeMappedTree and
 * produces tree log entries in which only the types at internal coalescent
 * nodes are preserved, i.e. all type-change nodes are stripped away.
 *
 * This is useful for producing tree files which can be fed into TreeAnnotator.
 *
 * @author Tim Vaughan <tgvaughan@gmail.com>
 */
public class TypedNodeTreeLogger extends CalculationNode implements Loggable {

    public Input<Tree> typedTreeInput = new Input<>(
            "typedTree",
            "Typed tree whose node types to log.",
            Input.Validate.REQUIRED);

    private Tree typedTree;

    @Override
    public void initAndValidate() {
        typedTree = typedTreeInput.get();
    }

    @Override
    public void init(PrintStream out) {
        typedTree.init(out);
    }

    @Override
    public void log(long nSample, PrintStream out) {

        if (typedTree instanceof TypeMappedTree)
            ((TypeMappedTree)typedTree).remapForLog(nSample);

        // Set up metadata string
        out.print("tree STATE_" + nSample + " = ");
        out.print(getStrippedNewick(typedTree.getRoot()));
        out.print(";");
    }

    @Override
    public void close(PrintStream out) {
        typedTree.close(out);
    }

    /**
     * Construct a newick representation of the given typed tree, but with
     * type-change nodes stripped away.  Useful for feeding into TreeAnnotator
     * to produce summary trees with (limited) type information.
     *
     * @param node root of typed tree.
     * @return newick representation.
     */
    public String getStrippedNewick(Node node) {

        StringBuilder resultBuilder = new StringBuilder();

        Node topNode = node;

        while (node.getChildren().size()==1)
            node = node.getChild(0);

        if (!node.isLeaf()) {

            resultBuilder.append("(");
            boolean isFirst = true;
            for (Node child : node.getChildren()) {
                if (isFirst)
                    isFirst = false;
                else
                    resultBuilder.append(",");

                resultBuilder.append(getStrippedNewick(child));
            }

            resultBuilder.append(")");
        }

        if (node.getID() != null)
            resultBuilder.append(node.getNr()+Tree.taxaTranslationOffset);

        resultBuilder.append("[&").append(node.metaDataString).append("]");

        double edgeLength = 0.0;
        if (topNode.getParent() != null)
            edgeLength = topNode.getParent().getHeight()-node.getHeight();

        resultBuilder.append(":").append(edgeLength);

        return resultBuilder.toString();
    }
}